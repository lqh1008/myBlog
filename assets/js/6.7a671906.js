(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{398:function(s,t,a){s.exports=a.p+"assets/img/browser-parse.50de5f57.png"},408:function(s,t,a){"use strict";a.r(t);var r=a(56),e=Object(r.a)({},(function(){var s=this,t=s.$createElement,r=s._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[r("h2",{attrs:{id:"什么是-js"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是-js"}},[s._v("#")]),s._v(" 什么是 JS？")]),s._v(" "),r("p",[s._v("JavaScript（通常缩写为 JS）是一种高级的、解释型的编程语言。")]),s._v(" "),r("p",[s._v("tips：所谓的解释性语言代码是一句一句的执行，不需要像编译型语言一样需要通过编译器转成机器码，之后再执行。")]),s._v(" "),r("h2",{attrs:{id:"为什么要学-js-高级"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#为什么要学-js-高级"}},[s._v("#")]),s._v(" 为什么要学 JS 高级")]),s._v(" "),r("p",[s._v("JS 高级虽然在日常开发中的作用有时候看起来不会那么明显，但是它可以将我的对于 JS 的理解提升到一个新的高度，让我们站在不一样的角度去看 JS。")]),s._v(" "),r("h2",{attrs:{id:"浏览器中代码是如何执行的"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#浏览器中代码是如何执行的"}},[s._v("#")]),s._v(" 浏览器中代码是如何执行的")]),s._v(" "),r("p",[r("img",{attrs:{src:a(398),alt:"浏览器解析过程"}})]),s._v(" "),r("p",[s._v("当浏览器打开一个网页的时候，首先会下载 index.html，然后我认为浏览器会对 dom 进行扫描，去观察有哪些 dom 需要请求的外部资源，然后去加载请求这些网络资源。")]),s._v(" "),r("p",[s._v("此时 html 自上而下执行，伴随着这些请求会进入异步 http 请求线程进行。当执行到了需要请求的 dom 元素 的时候，如果资源还是在请求，那么会一直等他请求结束，然后去执行里面的代码（在执行这些代码的过程中，如果有异步代码，那么会放入到异步队列），这个代码如果是 js，那么会阻塞之后的 css 代码以及 dom 渲染，如果是 css 请求，那么仅仅会阻塞 js 代码，dom 照旧渲染，然后执行下去。这里我理解是 js 的异步完成后，就会立即终止 css 代码以及 dom 渲染。")]),s._v(" "),r("p",[s._v("append：（js 会阻塞 css，以及 dom 渲染，css 会阻塞 dom 渲染，css 跟 dom 渲染是同时进行的）")]),s._v(" "),r("p",[s._v("所以得出结论：一般 css 放在 head 标签里面，因为他不影响 dom 渲染，这时候两个一起执行，js 放在 body 下面，这样既不会影响 dom 渲染，也能让 css 早点执行。")]),s._v(" "),r("p",[s._v("tips：js 代码首先会 Parse 模块解析成 AST，然后解释器 Ignition 会将 AST 转成 ByteCode，同时编译器 TurboFan 会将 ByteCode 转成 CPU 能够认识的机器码，如果一个函数被多次调用，那么这个函数就会被标记为热点函数，那么就会经过 TurboFan 转换成优化的机器码，提高代码的执行性能，但是，机器码实际上也会被还原为 ByteCode，这是因为如果后续执行函数的过程中，类型发生了变化（比如 sum 函数原来执行的是\nnumber 类型，后来执行变成了 string 类型），之前优化的机器码并不能正确的处理运算，就会逆向的转换成字节码")]),s._v(" "),r("p",[s._v("Q：那么我们的 JavaScript 源码是如何被解析（Parse 过程）的呢？")]),s._v(" "),r("ul",[r("li",[s._v("Blink 将源码交给 V8 引擎，Stream 获取到源码并且进行编码转换")]),s._v(" "),r("li",[s._v("Scanner 会进行词法分析（lexical analysis），词法分析会将代码转换成 tokens；")]),s._v(" "),r("li",[s._v("接下来 tokens 会被转换成 AST 树，经过 Parser 和 PreParser：\n"),r("ul",[r("li",[s._v("这是因为并不是所有的 JavaScript 代码，在一开始时就会被执行。那么对所有的 JavaScript 代码进行解析，必然会\n影响网页的运行效率；")]),s._v(" "),r("li",[s._v("所以 V8 引擎就实现了 Lazy Parsing（延迟解析）的方案，它的作用是将不必要的函数进行预解析，也就是只解析暂\n时需要的内容，而对函数的全量解析是在函数被调用时才会进行；")]),s._v(" "),r("li",[s._v("比如我们在一个函数 outer 内部定义了另外一个函数 inner，那么 inner 函数就会进行预解析。")])])])])])}),[],!1,null,null,null);t.default=e.exports}}]);